/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Task_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Task2 {

int _kFetchStatusValues[] = {
  FetchStatus::PENDING,
  FetchStatus::ITEM,
  FetchStatus::ENDED
};
const char* _kFetchStatusNames[] = {
  "PENDING",
  "ITEM",
  "ENDED"
};
const std::map<int, const char*> _FetchStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kFetchStatusValues, _kFetchStatusNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const FetchStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _FetchStatus_VALUES_TO_NAMES.find(val);
  if (it != _FetchStatus_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const FetchStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _FetchStatus_VALUES_TO_NAMES.find(val);
  if (it != _FetchStatus_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


InvalidKeyException::~InvalidKeyException() noexcept {
}


void InvalidKeyException::__set_invalidKey(const int32_t val) {
  this->invalidKey = val;
}

void InvalidKeyException::__set_expectedKey(const int32_t val) {
  this->expectedKey = val;
}
std::ostream& operator<<(std::ostream& out, const InvalidKeyException& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t InvalidKeyException::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->invalidKey);
          this->__isset.invalidKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->expectedKey);
          this->__isset.expectedKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidKeyException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InvalidKeyException");

  xfer += oprot->writeFieldBegin("invalidKey", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->invalidKey);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expectedKey", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->expectedKey);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InvalidKeyException &a, InvalidKeyException &b) {
  using ::std::swap;
  swap(a.invalidKey, b.invalidKey);
  swap(a.expectedKey, b.expectedKey);
  swap(a.__isset, b.__isset);
}

InvalidKeyException::InvalidKeyException(const InvalidKeyException& other0) : TException() {
  invalidKey = other0.invalidKey;
  expectedKey = other0.expectedKey;
  __isset = other0.__isset;
}
InvalidKeyException& InvalidKeyException::operator=(const InvalidKeyException& other1) {
  invalidKey = other1.invalidKey;
  expectedKey = other1.expectedKey;
  __isset = other1.__isset;
  return *this;
}
void InvalidKeyException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InvalidKeyException(";
  out << "invalidKey=" << to_string(invalidKey);
  out << ", " << "expectedKey=" << to_string(expectedKey);
  out << ")";
}

const char* InvalidKeyException::what() const noexcept {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: InvalidKeyException";
  }
}


ProtocolException::~ProtocolException() noexcept {
}


void ProtocolException::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const ProtocolException& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ProtocolException::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProtocolException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProtocolException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProtocolException &a, ProtocolException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

ProtocolException::ProtocolException(const ProtocolException& other2) : TException() {
  message = other2.message;
  __isset = other2.__isset;
}
ProtocolException& ProtocolException::operator=(const ProtocolException& other3) {
  message = other3.message;
  __isset = other3.__isset;
  return *this;
}
void ProtocolException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProtocolException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* ProtocolException::what() const noexcept {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: ProtocolException";
  }
}


ItemA::~ItemA() noexcept {
}


void ItemA::__set_fieldX(const std::string& val) {
  this->fieldX = val;
}

void ItemA::__set_fieldY(const std::vector<int16_t> & val) {
  this->fieldY = val;
}

void ItemA::__set_fieldZ(const int32_t val) {
  this->fieldZ = val;
__isset.fieldZ = true;
}
std::ostream& operator<<(std::ostream& out, const ItemA& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ItemA::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_fieldX = false;
  bool isset_fieldY = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fieldX);
          isset_fieldX = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fieldY.clear();
            uint32_t _size4;
            ::apache::thrift::protocol::TType _etype7;
            xfer += iprot->readListBegin(_etype7, _size4);
            this->fieldY.resize(_size4);
            uint32_t _i8;
            for (_i8 = 0; _i8 < _size4; ++_i8)
            {
              xfer += iprot->readI16(this->fieldY[_i8]);
            }
            xfer += iprot->readListEnd();
          }
          isset_fieldY = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->fieldZ);
          this->__isset.fieldZ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_fieldX)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fieldY)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ItemA::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ItemA");

  xfer += oprot->writeFieldBegin("fieldX", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->fieldX);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fieldY", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->fieldY.size()));
    std::vector<int16_t> ::const_iterator _iter9;
    for (_iter9 = this->fieldY.begin(); _iter9 != this->fieldY.end(); ++_iter9)
    {
      xfer += oprot->writeI16((*_iter9));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.fieldZ) {
    xfer += oprot->writeFieldBegin("fieldZ", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->fieldZ);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ItemA &a, ItemA &b) {
  using ::std::swap;
  swap(a.fieldX, b.fieldX);
  swap(a.fieldY, b.fieldY);
  swap(a.fieldZ, b.fieldZ);
  swap(a.__isset, b.__isset);
}

ItemA::ItemA(const ItemA& other10) {
  fieldX = other10.fieldX;
  fieldY = other10.fieldY;
  fieldZ = other10.fieldZ;
  __isset = other10.__isset;
}
ItemA& ItemA::operator=(const ItemA& other11) {
  fieldX = other11.fieldX;
  fieldY = other11.fieldY;
  fieldZ = other11.fieldZ;
  __isset = other11.__isset;
  return *this;
}
void ItemA::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ItemA(";
  out << "fieldX=" << to_string(fieldX);
  out << ", " << "fieldY=" << to_string(fieldY);
  out << ", " << "fieldZ="; (__isset.fieldZ ? (out << to_string(fieldZ)) : (out << "<null>"));
  out << ")";
}


ItemB::~ItemB() noexcept {
}


void ItemB::__set_fieldX(const int16_t val) {
  this->fieldX = val;
}

void ItemB::__set_fieldY(const std::vector<std::string> & val) {
  this->fieldY = val;
__isset.fieldY = true;
}

void ItemB::__set_fieldZ(const std::set<std::string> & val) {
  this->fieldZ = val;
}
std::ostream& operator<<(std::ostream& out, const ItemB& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ItemB::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_fieldX = false;
  bool isset_fieldZ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->fieldX);
          isset_fieldX = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fieldY.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->fieldY.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += iprot->readString(this->fieldY[_i16]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.fieldY = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->fieldZ.clear();
            uint32_t _size17;
            ::apache::thrift::protocol::TType _etype20;
            xfer += iprot->readSetBegin(_etype20, _size17);
            uint32_t _i21;
            for (_i21 = 0; _i21 < _size17; ++_i21)
            {
              std::string _elem22;
              xfer += iprot->readString(_elem22);
              this->fieldZ.insert(_elem22);
            }
            xfer += iprot->readSetEnd();
          }
          isset_fieldZ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_fieldX)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fieldZ)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ItemB::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ItemB");

  xfer += oprot->writeFieldBegin("fieldX", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->fieldX);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.fieldY) {
    xfer += oprot->writeFieldBegin("fieldY", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->fieldY.size()));
      std::vector<std::string> ::const_iterator _iter23;
      for (_iter23 = this->fieldY.begin(); _iter23 != this->fieldY.end(); ++_iter23)
      {
        xfer += oprot->writeString((*_iter23));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("fieldZ", ::apache::thrift::protocol::T_SET, 3);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->fieldZ.size()));
    std::set<std::string> ::const_iterator _iter24;
    for (_iter24 = this->fieldZ.begin(); _iter24 != this->fieldZ.end(); ++_iter24)
    {
      xfer += oprot->writeString((*_iter24));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ItemB &a, ItemB &b) {
  using ::std::swap;
  swap(a.fieldX, b.fieldX);
  swap(a.fieldY, b.fieldY);
  swap(a.fieldZ, b.fieldZ);
  swap(a.__isset, b.__isset);
}

ItemB::ItemB(const ItemB& other25) {
  fieldX = other25.fieldX;
  fieldY = other25.fieldY;
  fieldZ = other25.fieldZ;
  __isset = other25.__isset;
}
ItemB& ItemB::operator=(const ItemB& other26) {
  fieldX = other26.fieldX;
  fieldY = other26.fieldY;
  fieldZ = other26.fieldZ;
  __isset = other26.__isset;
  return *this;
}
void ItemB::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ItemB(";
  out << "fieldX=" << to_string(fieldX);
  out << ", " << "fieldY="; (__isset.fieldY ? (out << to_string(fieldY)) : (out << "<null>"));
  out << ", " << "fieldZ=" << to_string(fieldZ);
  out << ")";
}


ItemC::~ItemC() noexcept {
}


void ItemC::__set_fieldX(const bool val) {
  this->fieldX = val;
}
std::ostream& operator<<(std::ostream& out, const ItemC& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ItemC::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_fieldX = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->fieldX);
          isset_fieldX = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_fieldX)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ItemC::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ItemC");

  xfer += oprot->writeFieldBegin("fieldX", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->fieldX);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ItemC &a, ItemC &b) {
  using ::std::swap;
  swap(a.fieldX, b.fieldX);
}

ItemC::ItemC(const ItemC& other27) {
  fieldX = other27.fieldX;
}
ItemC& ItemC::operator=(const ItemC& other28) {
  fieldX = other28.fieldX;
  return *this;
}
void ItemC::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ItemC(";
  out << "fieldX=" << to_string(fieldX);
  out << ")";
}


Item::~Item() noexcept {
}


void Item::__set_itemA(const ItemA& val) {
  this->itemA = val;
__isset.itemA = true;
}

void Item::__set_itemB(const ItemB& val) {
  this->itemB = val;
__isset.itemB = true;
}

void Item::__set_itemC(const ItemC& val) {
  this->itemC = val;
__isset.itemC = true;
}

void Item::__set_type(const std::string& val) {
  this->type = val;
}
std::ostream& operator<<(std::ostream& out, const Item& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Item::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->itemA.read(iprot);
          this->__isset.itemA = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->itemB.read(iprot);
          this->__isset.itemB = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->itemC.read(iprot);
          this->__isset.itemC = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Item::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Item");

  if (this->__isset.itemA) {
    xfer += oprot->writeFieldBegin("itemA", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->itemA.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.itemB) {
    xfer += oprot->writeFieldBegin("itemB", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->itemB.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.itemC) {
    xfer += oprot->writeFieldBegin("itemC", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->itemC.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Item &a, Item &b) {
  using ::std::swap;
  swap(a.itemA, b.itemA);
  swap(a.itemB, b.itemB);
  swap(a.itemC, b.itemC);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

Item::Item(const Item& other29) {
  itemA = other29.itemA;
  itemB = other29.itemB;
  itemC = other29.itemC;
  type = other29.type;
  __isset = other29.__isset;
}
Item& Item::operator=(const Item& other30) {
  itemA = other30.itemA;
  itemB = other30.itemB;
  itemC = other30.itemC;
  type = other30.type;
  __isset = other30.__isset;
  return *this;
}
void Item::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Item(";
  out << "itemA="; (__isset.itemA ? (out << to_string(itemA)) : (out << "<null>"));
  out << ", " << "itemB="; (__isset.itemB ? (out << to_string(itemB)) : (out << "<null>"));
  out << ", " << "itemC="; (__isset.itemC ? (out << to_string(itemC)) : (out << "<null>"));
  out << ", " << "type=" << to_string(type);
  out << ")";
}


FetchResult::~FetchResult() noexcept {
}


void FetchResult::__set_status(const FetchStatus::type val) {
  this->status = val;
}

void FetchResult::__set_item(const ItemA& val) {
  this->item = val;
}
std::ostream& operator<<(std::ostream& out, const FetchResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FetchResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast31;
          xfer += iprot->readI32(ecast31);
          this->status = (FetchStatus::type)ecast31;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->item.read(iprot);
          this->__isset.item = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FetchResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FetchResult");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->item.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FetchResult &a, FetchResult &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.item, b.item);
  swap(a.__isset, b.__isset);
}

FetchResult::FetchResult(const FetchResult& other32) {
  status = other32.status;
  item = other32.item;
  __isset = other32.__isset;
}
FetchResult& FetchResult::operator=(const FetchResult& other33) {
  status = other33.status;
  item = other33.item;
  __isset = other33.__isset;
  return *this;
}
void FetchResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FetchResult(";
  out << "status=" << to_string(status);
  out << ", " << "item=" << to_string(item);
  out << ")";
}


FetchMultipleResult::~FetchMultipleResult() noexcept {
}


void FetchMultipleResult::__set_status(const FetchStatus::type val) {
  this->status = val;
}

void FetchMultipleResult::__set_items(const std::vector<Item> & val) {
  this->items = val;
}
std::ostream& operator<<(std::ostream& out, const FetchMultipleResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FetchMultipleResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast34;
          xfer += iprot->readI32(ecast34);
          this->status = (FetchStatus::type)ecast34;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->items.clear();
            uint32_t _size35;
            ::apache::thrift::protocol::TType _etype38;
            xfer += iprot->readListBegin(_etype38, _size35);
            this->items.resize(_size35);
            uint32_t _i39;
            for (_i39 = 0; _i39 < _size35; ++_i39)
            {
              xfer += this->items[_i39].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.items = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FetchMultipleResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FetchMultipleResult");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("items", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->items.size()));
    std::vector<Item> ::const_iterator _iter40;
    for (_iter40 = this->items.begin(); _iter40 != this->items.end(); ++_iter40)
    {
      xfer += (*_iter40).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FetchMultipleResult &a, FetchMultipleResult &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.items, b.items);
  swap(a.__isset, b.__isset);
}

FetchMultipleResult::FetchMultipleResult(const FetchMultipleResult& other41) {
  status = other41.status;
  items = other41.items;
  __isset = other41.__isset;
}
FetchMultipleResult& FetchMultipleResult::operator=(const FetchMultipleResult& other42) {
  status = other42.status;
  items = other42.items;
  __isset = other42.__isset;
  return *this;
}
void FetchMultipleResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FetchMultipleResult(";
  out << "status=" << to_string(status);
  out << ", " << "items=" << to_string(items);
  out << ")";
}

} // namespace
