/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Search_H
#define Search_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "Task_types.h"

namespace Task2 {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SearchIf {
 public:
  virtual ~SearchIf() {}
  virtual void fetch(FetchResult& _return) = 0;
  virtual void initiateMultiple(const std::set<std::string> & itemTypes, const int32_t itemLimit) = 0;
  virtual void fetchMultiple(FetchMultipleResult& _return, const int32_t itemCount) = 0;
};

class SearchIfFactory {
 public:
  typedef SearchIf Handler;

  virtual ~SearchIfFactory() {}

  virtual SearchIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SearchIf* /* handler */) = 0;
};

class SearchIfSingletonFactory : virtual public SearchIfFactory {
 public:
  SearchIfSingletonFactory(const ::std::shared_ptr<SearchIf>& iface) : iface_(iface) {}
  virtual ~SearchIfSingletonFactory() {}

  virtual SearchIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SearchIf* /* handler */) {}

 protected:
  ::std::shared_ptr<SearchIf> iface_;
};

class SearchNull : virtual public SearchIf {
 public:
  virtual ~SearchNull() {}
  void fetch(FetchResult& /* _return */) {
    return;
  }
  void initiateMultiple(const std::set<std::string> & /* itemTypes */, const int32_t /* itemLimit */) {
    return;
  }
  void fetchMultiple(FetchMultipleResult& /* _return */, const int32_t /* itemCount */) {
    return;
  }
};


class Search_fetch_args {
 public:

  Search_fetch_args(const Search_fetch_args&);
  Search_fetch_args& operator=(const Search_fetch_args&);
  Search_fetch_args() {
  }

  virtual ~Search_fetch_args() noexcept;

  bool operator == (const Search_fetch_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Search_fetch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Search_fetch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Search_fetch_pargs {
 public:


  virtual ~Search_fetch_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Search_fetch_result__isset {
  _Search_fetch_result__isset() : success(false), protocolException(false) {}
  bool success :1;
  bool protocolException :1;
} _Search_fetch_result__isset;

class Search_fetch_result {
 public:

  Search_fetch_result(const Search_fetch_result&);
  Search_fetch_result& operator=(const Search_fetch_result&);
  Search_fetch_result() {
  }

  virtual ~Search_fetch_result() noexcept;
  FetchResult success;
  ProtocolException protocolException;

  _Search_fetch_result__isset __isset;

  void __set_success(const FetchResult& val);

  void __set_protocolException(const ProtocolException& val);

  bool operator == (const Search_fetch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(protocolException == rhs.protocolException))
      return false;
    return true;
  }
  bool operator != (const Search_fetch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Search_fetch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Search_fetch_presult__isset {
  _Search_fetch_presult__isset() : success(false), protocolException(false) {}
  bool success :1;
  bool protocolException :1;
} _Search_fetch_presult__isset;

class Search_fetch_presult {
 public:


  virtual ~Search_fetch_presult() noexcept;
  FetchResult* success;
  ProtocolException protocolException;

  _Search_fetch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Search_initiateMultiple_args__isset {
  _Search_initiateMultiple_args__isset() : itemTypes(false), itemLimit(false) {}
  bool itemTypes :1;
  bool itemLimit :1;
} _Search_initiateMultiple_args__isset;

class Search_initiateMultiple_args {
 public:

  Search_initiateMultiple_args(const Search_initiateMultiple_args&);
  Search_initiateMultiple_args& operator=(const Search_initiateMultiple_args&);
  Search_initiateMultiple_args() : itemLimit(0) {
  }

  virtual ~Search_initiateMultiple_args() noexcept;
  std::set<std::string>  itemTypes;
  int32_t itemLimit;

  _Search_initiateMultiple_args__isset __isset;

  void __set_itemTypes(const std::set<std::string> & val);

  void __set_itemLimit(const int32_t val);

  bool operator == (const Search_initiateMultiple_args & rhs) const
  {
    if (!(itemTypes == rhs.itemTypes))
      return false;
    if (!(itemLimit == rhs.itemLimit))
      return false;
    return true;
  }
  bool operator != (const Search_initiateMultiple_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Search_initiateMultiple_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Search_initiateMultiple_pargs {
 public:


  virtual ~Search_initiateMultiple_pargs() noexcept;
  const std::set<std::string> * itemTypes;
  const int32_t* itemLimit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Search_initiateMultiple_result__isset {
  _Search_initiateMultiple_result__isset() : protocolException(false) {}
  bool protocolException :1;
} _Search_initiateMultiple_result__isset;

class Search_initiateMultiple_result {
 public:

  Search_initiateMultiple_result(const Search_initiateMultiple_result&);
  Search_initiateMultiple_result& operator=(const Search_initiateMultiple_result&);
  Search_initiateMultiple_result() {
  }

  virtual ~Search_initiateMultiple_result() noexcept;
  ProtocolException protocolException;

  _Search_initiateMultiple_result__isset __isset;

  void __set_protocolException(const ProtocolException& val);

  bool operator == (const Search_initiateMultiple_result & rhs) const
  {
    if (!(protocolException == rhs.protocolException))
      return false;
    return true;
  }
  bool operator != (const Search_initiateMultiple_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Search_initiateMultiple_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Search_initiateMultiple_presult__isset {
  _Search_initiateMultiple_presult__isset() : protocolException(false) {}
  bool protocolException :1;
} _Search_initiateMultiple_presult__isset;

class Search_initiateMultiple_presult {
 public:


  virtual ~Search_initiateMultiple_presult() noexcept;
  ProtocolException protocolException;

  _Search_initiateMultiple_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Search_fetchMultiple_args__isset {
  _Search_fetchMultiple_args__isset() : itemCount(false) {}
  bool itemCount :1;
} _Search_fetchMultiple_args__isset;

class Search_fetchMultiple_args {
 public:

  Search_fetchMultiple_args(const Search_fetchMultiple_args&);
  Search_fetchMultiple_args& operator=(const Search_fetchMultiple_args&);
  Search_fetchMultiple_args() : itemCount(0) {
  }

  virtual ~Search_fetchMultiple_args() noexcept;
  int32_t itemCount;

  _Search_fetchMultiple_args__isset __isset;

  void __set_itemCount(const int32_t val);

  bool operator == (const Search_fetchMultiple_args & rhs) const
  {
    if (!(itemCount == rhs.itemCount))
      return false;
    return true;
  }
  bool operator != (const Search_fetchMultiple_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Search_fetchMultiple_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Search_fetchMultiple_pargs {
 public:


  virtual ~Search_fetchMultiple_pargs() noexcept;
  const int32_t* itemCount;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Search_fetchMultiple_result__isset {
  _Search_fetchMultiple_result__isset() : success(false), protocolException(false) {}
  bool success :1;
  bool protocolException :1;
} _Search_fetchMultiple_result__isset;

class Search_fetchMultiple_result {
 public:

  Search_fetchMultiple_result(const Search_fetchMultiple_result&);
  Search_fetchMultiple_result& operator=(const Search_fetchMultiple_result&);
  Search_fetchMultiple_result() {
  }

  virtual ~Search_fetchMultiple_result() noexcept;
  FetchMultipleResult success;
  ProtocolException protocolException;

  _Search_fetchMultiple_result__isset __isset;

  void __set_success(const FetchMultipleResult& val);

  void __set_protocolException(const ProtocolException& val);

  bool operator == (const Search_fetchMultiple_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(protocolException == rhs.protocolException))
      return false;
    return true;
  }
  bool operator != (const Search_fetchMultiple_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Search_fetchMultiple_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Search_fetchMultiple_presult__isset {
  _Search_fetchMultiple_presult__isset() : success(false), protocolException(false) {}
  bool success :1;
  bool protocolException :1;
} _Search_fetchMultiple_presult__isset;

class Search_fetchMultiple_presult {
 public:


  virtual ~Search_fetchMultiple_presult() noexcept;
  FetchMultipleResult* success;
  ProtocolException protocolException;

  _Search_fetchMultiple_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SearchClient : virtual public SearchIf {
 public:
  SearchClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SearchClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void fetch(FetchResult& _return);
  void send_fetch();
  void recv_fetch(FetchResult& _return);
  void initiateMultiple(const std::set<std::string> & itemTypes, const int32_t itemLimit);
  void send_initiateMultiple(const std::set<std::string> & itemTypes, const int32_t itemLimit);
  void recv_initiateMultiple();
  void fetchMultiple(FetchMultipleResult& _return, const int32_t itemCount);
  void send_fetchMultiple(const int32_t itemCount);
  void recv_fetchMultiple(FetchMultipleResult& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SearchProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<SearchIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SearchProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_fetch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_initiateMultiple(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMultiple(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SearchProcessor(::std::shared_ptr<SearchIf> iface) :
    iface_(iface) {
    processMap_["fetch"] = &SearchProcessor::process_fetch;
    processMap_["initiateMultiple"] = &SearchProcessor::process_initiateMultiple;
    processMap_["fetchMultiple"] = &SearchProcessor::process_fetchMultiple;
  }

  virtual ~SearchProcessor() {}
};

class SearchProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SearchProcessorFactory(const ::std::shared_ptr< SearchIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< SearchIfFactory > handlerFactory_;
};

class SearchMultiface : virtual public SearchIf {
 public:
  SearchMultiface(std::vector<std::shared_ptr<SearchIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SearchMultiface() {}
 protected:
  std::vector<std::shared_ptr<SearchIf> > ifaces_;
  SearchMultiface() {}
  void add(::std::shared_ptr<SearchIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void fetch(FetchResult& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetch(_return);
    }
    ifaces_[i]->fetch(_return);
    return;
  }

  void initiateMultiple(const std::set<std::string> & itemTypes, const int32_t itemLimit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->initiateMultiple(itemTypes, itemLimit);
    }
    ifaces_[i]->initiateMultiple(itemTypes, itemLimit);
  }

  void fetchMultiple(FetchMultipleResult& _return, const int32_t itemCount) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMultiple(_return, itemCount);
    }
    ifaces_[i]->fetchMultiple(_return, itemCount);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SearchConcurrentClient : virtual public SearchIf {
 public:
  SearchConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  SearchConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void fetch(FetchResult& _return);
  int32_t send_fetch();
  void recv_fetch(FetchResult& _return, const int32_t seqid);
  void initiateMultiple(const std::set<std::string> & itemTypes, const int32_t itemLimit);
  int32_t send_initiateMultiple(const std::set<std::string> & itemTypes, const int32_t itemLimit);
  void recv_initiateMultiple(const int32_t seqid);
  void fetchMultiple(FetchMultipleResult& _return, const int32_t itemCount);
  int32_t send_fetchMultiple(const int32_t itemCount);
  void recv_fetchMultiple(FetchMultipleResult& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
