#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def fetch(self):
        pass

    def initiateMultiple(self, itemTypes, itemLimit):
        """
        Parameters:
         - itemTypes
         - itemLimit

        """
        pass

    def fetchMultiple(self, itemCount):
        """
        Parameters:
         - itemCount

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def fetch(self):
        self.send_fetch()
        return self.recv_fetch()

    def send_fetch(self):
        self._oprot.writeMessageBegin('fetch', TMessageType.CALL, self._seqid)
        args = fetch_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_fetch(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = fetch_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.protocolException is not None:
            raise result.protocolException
        raise TApplicationException(TApplicationException.MISSING_RESULT, "fetch failed: unknown result")

    def initiateMultiple(self, itemTypes, itemLimit):
        """
        Parameters:
         - itemTypes
         - itemLimit

        """
        self.send_initiateMultiple(itemTypes, itemLimit)
        self.recv_initiateMultiple()

    def send_initiateMultiple(self, itemTypes, itemLimit):
        self._oprot.writeMessageBegin('initiateMultiple', TMessageType.CALL, self._seqid)
        args = initiateMultiple_args()
        args.itemTypes = itemTypes
        args.itemLimit = itemLimit
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_initiateMultiple(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = initiateMultiple_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.protocolException is not None:
            raise result.protocolException
        return

    def fetchMultiple(self, itemCount):
        """
        Parameters:
         - itemCount

        """
        self.send_fetchMultiple(itemCount)
        return self.recv_fetchMultiple()

    def send_fetchMultiple(self, itemCount):
        self._oprot.writeMessageBegin('fetchMultiple', TMessageType.CALL, self._seqid)
        args = fetchMultiple_args()
        args.itemCount = itemCount
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_fetchMultiple(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = fetchMultiple_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.protocolException is not None:
            raise result.protocolException
        raise TApplicationException(TApplicationException.MISSING_RESULT, "fetchMultiple failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["fetch"] = Processor.process_fetch
        self._processMap["initiateMultiple"] = Processor.process_initiateMultiple
        self._processMap["fetchMultiple"] = Processor.process_fetchMultiple
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_fetch(self, seqid, iprot, oprot):
        args = fetch_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = fetch_result()
        try:
            result.success = self._handler.fetch()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ProtocolException as protocolException:
            msg_type = TMessageType.REPLY
            result.protocolException = protocolException
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("fetch", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_initiateMultiple(self, seqid, iprot, oprot):
        args = initiateMultiple_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = initiateMultiple_result()
        try:
            self._handler.initiateMultiple(args.itemTypes, args.itemLimit)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ProtocolException as protocolException:
            msg_type = TMessageType.REPLY
            result.protocolException = protocolException
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("initiateMultiple", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_fetchMultiple(self, seqid, iprot, oprot):
        args = fetchMultiple_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = fetchMultiple_result()
        try:
            result.success = self._handler.fetchMultiple(args.itemCount)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ProtocolException as protocolException:
            msg_type = TMessageType.REPLY
            result.protocolException = protocolException
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("fetchMultiple", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class fetch_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('fetch_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(fetch_args)
fetch_args.thrift_spec = (
)


class fetch_result(object):
    """
    Attributes:
     - success
     - protocolException

    """


    def __init__(self, success=None, protocolException=None,):
        self.success = success
        self.protocolException = protocolException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = FetchResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.protocolException = ProtocolException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('fetch_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.protocolException is not None:
            oprot.writeFieldBegin('protocolException', TType.STRUCT, 1)
            self.protocolException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(fetch_result)
fetch_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [FetchResult, None], None, ),  # 0
    (1, TType.STRUCT, 'protocolException', [ProtocolException, None], None, ),  # 1
)


class initiateMultiple_args(object):
    """
    Attributes:
     - itemTypes
     - itemLimit

    """


    def __init__(self, itemTypes=None, itemLimit=None,):
        self.itemTypes = itemTypes
        self.itemLimit = itemLimit

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.SET:
                    self.itemTypes = set()
                    (_etype31, _size28) = iprot.readSetBegin()
                    for _i32 in range(_size28):
                        _elem33 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.itemTypes.add(_elem33)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.itemLimit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('initiateMultiple_args')
        if self.itemTypes is not None:
            oprot.writeFieldBegin('itemTypes', TType.SET, 1)
            oprot.writeSetBegin(TType.STRING, len(self.itemTypes))
            for iter34 in self.itemTypes:
                oprot.writeString(iter34.encode('utf-8') if sys.version_info[0] == 2 else iter34)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.itemLimit is not None:
            oprot.writeFieldBegin('itemLimit', TType.I32, 2)
            oprot.writeI32(self.itemLimit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(initiateMultiple_args)
initiateMultiple_args.thrift_spec = (
    None,  # 0
    (1, TType.SET, 'itemTypes', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.I32, 'itemLimit', None, None, ),  # 2
)


class initiateMultiple_result(object):
    """
    Attributes:
     - protocolException

    """


    def __init__(self, protocolException=None,):
        self.protocolException = protocolException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.protocolException = ProtocolException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('initiateMultiple_result')
        if self.protocolException is not None:
            oprot.writeFieldBegin('protocolException', TType.STRUCT, 1)
            self.protocolException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(initiateMultiple_result)
initiateMultiple_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'protocolException', [ProtocolException, None], None, ),  # 1
)


class fetchMultiple_args(object):
    """
    Attributes:
     - itemCount

    """


    def __init__(self, itemCount=None,):
        self.itemCount = itemCount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.itemCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('fetchMultiple_args')
        if self.itemCount is not None:
            oprot.writeFieldBegin('itemCount', TType.I32, 1)
            oprot.writeI32(self.itemCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(fetchMultiple_args)
fetchMultiple_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'itemCount', None, None, ),  # 1
)


class fetchMultiple_result(object):
    """
    Attributes:
     - success
     - protocolException

    """


    def __init__(self, success=None, protocolException=None,):
        self.success = success
        self.protocolException = protocolException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = FetchMultipleResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.protocolException = ProtocolException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('fetchMultiple_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.protocolException is not None:
            oprot.writeFieldBegin('protocolException', TType.STRUCT, 1)
            self.protocolException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(fetchMultiple_result)
fetchMultiple_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [FetchMultipleResult, None], None, ),  # 0
    (1, TType.STRUCT, 'protocolException', [ProtocolException, None], None, ),  # 1
)
fix_spec(all_structs)
del all_structs
